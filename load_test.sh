#!/opt/bin/bash
#===============================================================================
#
#          FILE:  load_test.sh
# 
#         USAGE:  ./load_test.sh 
# 
#   DESCRIPTION:  Скрипт проверки нагрузки процессора по команде uptime
# 
#       OPTIONS:  --- -H <IP> -w (w1,w15,w15) -c (c1,c5,c15)
#  REQUIREMENTS:  ---
#          BUGS:  ---
#         NOTES:  ---
#        AUTHOR:  Ptah57 Oziris (), ptah57@yandex.ru
#       COMPANY:  Ra&Pt
#       VERSION:  1.0
#       CREATED:  01/06/2025 04:45:50 PM MSK
#      REVISION:  ---
#===============================================================================
##########################################################################################
#source /opt/lib/check_ip.sh     #  в случае выноса функции в отдельную библиотеку
##########################################################################################
# Раздел переменных - отдадим дань Коболу 8)
##########################################################################################
# Возвращаемый статус (код результата работы скрипта)
##########################################################################################
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
##########################################################################################
PING_HOST=127.0.0.1                # по умолчанию работаем с локальным сервером
LEVEL_WARNING=4.18,3.21,2.91       # соответствует значению парметра ключа -w по умолчанию за 1,5.15 минут
LEVEL_CRITICAL=10.21,9,11,8,11     # соответствует значению парметра ключа -c по умолчанию за 1,5.15 минут
Current_LA=0,00,0,00,0,00
Current_LA1=0,00
Current_LA5=0,00
Current_LA15=0,00
htype=mips
##########################################################################################
# Проверка правильности ввода адреса хоста

check_ip() {
  local ip=$PING_HOST
    # Регулярное выражение для проверки формата IPv4
      if [[ $ip =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$ ]]; then
        for i in {1..4}; do
          if [[ ${BASH_REMATCH[$i]} -gt 255 || ${BASH_REMATCH[$i]} -lt 0 ]]; then
            echo "Некорректный IP адрес."
	    return 1
	  fi
	done
	#    echo "IP адрес корректен."   #  не загромождать вывод ,  использовать только для отладки
	return 0
	else
	  echo "Некорректный формат IP адреса."
	  return 1
      fi
}

##############################################################################################age() {
help_usage() {
  echo "Usage:"
  echo " $0 -H (PING_HOST) -w (LEVEL_WARNING1),(LEVEL_WARNING5),(LEVEL_WARNING15) -c (LEVEL_CRITICAL1),(LEVEL_CRITICAL5),(LEVEL_CRITICAL15)" 
  echo " $0 (-v | --version)"
  echo " $0 (-h | --help)"
  echo "_______________________________________________________" 
                    
}
##########################################################################################
help_version() {
  echo "_______________________________________________________"
  echo "load_test.sh ( это аналог плагина nagios-plugins load_check ) v. 0.01"
  echo "автор Ptah57 Oziris <ptah57@mail.ru 2024 г. >"
}

##########################################################################################
exit_abnormal() {                         # Функция для выхода в случае ошибки.
  help_version
  help_usage
  exit 2
}
##########################################################################################
check_w_arg() {
# Регулярное выражение
  regex='^[0-9]{1,4}\.[0-9]{1,2},[0-9]{1,2}%+$' 
    if [[ $LEVEL_WARNING =~ $regex ]]; then
      :
      #    echo "Строка аргумента параметра -w соответствует шаблону."
    else
      echo "Строка аргумента параметра -w не соответствует шаблону."
      exit_abnormal
    fi
}
##########################################################################################
check_c_arg() {
# Регулярное выражение
  regex='^[0-9]{1,4}\.[0-9]{1,2},[0-9]{1,2}%+$'
    if [[ $LEVEL_CRITICAL =~ $regex ]]; then
      :
      #    echo "Строка аргумента параметра -c соответствует шаблону."
    else
      echo "Строка аргумента параметра -c не соответствует шаблону."
      exit_abnormal
    fi
}

##########################################################################################
hard_type() {

htype=$(uname -m)

}

##########################################################################################
# код для отладки
##########################################################################################
debug_kod() {
echo "Тип машины $htype"
echo " $PING_HOST"
echo " default w $LEVEL_WARNING"
echo " default c $LEVEL_CRITICAL"
echo " $Current_LA"
echo " 1 $Current_LA1"
echo " 5 $Current_LA5"
echo " 15 $Current_LA15"
}
##########################################################################################
# определяем срежнюю загрузку процессора за 1, 5 и 15 минут
##########################################################################################
LA_get() {
case $htype in
  mips)
    Current_LA=$(uptime | awk '{print $8,$9,$10}' | sed 's/ //g')
    Current_LA1=$(echo $Current_LA | cut -d ',' -f1)
    Current_LA5=$(echo $Current_LA | cut -d ',' -f2)
    Current_LA15=$(echo $Current_LA | cut -d ',' -f3)
    ;;
  x86_64)
    Current_LA=$(uptime | awk '{print $8,$9,$10}') 
    Current_LA1=$(echo $Current_LA | cut -d ' ' -f1)
    Current_LA5=$(echo $Current_LA | cut -d ' ' -f2)
    Current_LA15=$(echo $Current_LA | cut -d ' ' -f3)
    ;;
  *)
    exit_abnormal
    ;;
esac
}
##########################################################################################
#===============================================================================
hard_type             #  провера на тип процессора
LA_get                #  получить данные по загрузке процессора
debug_kod             #  вывод отладочной информации
exit $OK
